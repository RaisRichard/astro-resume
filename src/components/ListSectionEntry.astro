---
import { type CollectionEntry } from "astro:content";
import { Dot } from "lucide-react";

interface Props {
	entry: CollectionEntry<"education" | "professionalExperience" | "training">;
	presentLabel: string;
}

const { entry, presentLabel } = Astro.props;

interface RemappedEntry {
	label: string;
	place: string;
	city?: string;
	country?: string;
	startDate?: {
		month?: number | string;
		year: number | string;
	};
	endDate?: {
		month?: number | string;
		year: number | string;
	};
	notes?: string[];
}

let remappedEntry: RemappedEntry;

if (entry.collection === "education") {
	const data = entry.data;

	remappedEntry = {
		label: data.degree,
		place: data.school,
		city: data.city,
		country: data.country,
		startDate: {
			month: data.startDate.month,
			year: data.startDate.year,
		},
	};

	if (data.endDate) {
		remappedEntry.endDate = {
			month: data.endDate.month,
			year: data.endDate.year,
		};
	}
} else if (entry.collection === "professionalExperience") {
	const data = entry.data;

	remappedEntry = {
		label: data.position,
		place: data.company,
		city: data.city,
		country: data.country,
		startDate: {
			month: data.startDate.month,
			year: data.startDate.year,
		},
	};

	if (data.endDate) {
		remappedEntry.endDate = {
			month: data.endDate.month,
			year: data.endDate.year,
		};
	}

	if (data.notes) {
		remappedEntry.notes = data.notes;
	}
} else if (entry.collection === "training") {
	const data = entry.data;

	remappedEntry = {
		label: data.name,
		place: data.place,
		endDate: {
			month: data.date.month,
			year: data.date.year,
		},
	};
} else {
	throw new Error("Invalid collection");
}

if (remappedEntry.startDate && (remappedEntry.startDate.month as number) < 10) {
	remappedEntry.startDate.month =
		"0" + remappedEntry.startDate.month?.toString();
}

if (remappedEntry.endDate && (remappedEntry.endDate.month as number) < 10) {
	remappedEntry.endDate.month = "0" + remappedEntry.endDate.month?.toString();
}
---

<div class="flex flex-col mx-4 py-1 text-sm border-b last:border-b-0 border-richgreen-100">
	<div class="flex place-content-between">
		<h3 class="font-bold">{remappedEntry.label}</h3>
		{
			remappedEntry.startDate && remappedEntry.endDate ? (
				<p class="">
					{remappedEntry.startDate.month}/{remappedEntry.startDate.year} - {remappedEntry.endDate.month}/{remappedEntry.endDate.year}
				</p>
			) : remappedEntry.startDate ? (
				<p class="">
					{remappedEntry.startDate.month}/{remappedEntry.startDate.year} - {presentLabel}
				</p>
			) : remappedEntry.endDate ? (
				<p class="">
					{remappedEntry.endDate.month}/{remappedEntry.endDate.year}
				</p>
			) : (
				<div />
			)
		}
	</div>
	<div class="flex place-content-between">
		<p class="italic">{remappedEntry.place}</p>
		{
			remappedEntry.city && remappedEntry.country ? (
				<p>
					{remappedEntry.city}, {remappedEntry.country}
				</p>
			) : (
				<div />
			)
		}
	</div>
	{
		remappedEntry.notes && (
			<ul>
				{remappedEntry.notes.map((note) => (
					<li class="flex items-center px-2 py-0.5">
						<Dot size={24} className="grow-0 shrink-0" />
						<p>{note}</p>
					</li>
				))}
			</ul>
		)
	}
</div>
